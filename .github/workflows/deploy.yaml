name: EKS NGINX Deployment with Existing Resources

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  CLUSTER_NAME: nginx-cluster
  DOMAIN_NAME: yourdomain.com  # Must match ACM certificate
  EXISTING_ACM_CERT_ARN: "arn:aws:acm:us-west-2:123456789012:certificate/your-cert-id"
  EXISTING_IAM_ROLE_ARN: "arn:aws:iam::123456789012:role/your-role-name"
  TF_VERSION: "1.5.7"
  HELM_VERSION: "3.12.3"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
    # Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Configure AWS credentials using existing IAM role
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.EXISTING_IAM_ROLE_ARN }}
        role-session-name: github-actions-eks-deploy

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init -input=false -upgrade
      working-directory: ./terraform

    # Terraform Plan with existing resources
    - name: Terraform Plan
      run: |
        terraform plan \
          -var="cluster_name=${{ env.CLUSTER_NAME }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="acm_certificate_arn=${{ env.EXISTING_ACM_CERT_ARN }}" \
          -var="create_acm_certificate=false" \
          -out=tfplan
      working-directory: ./terraform

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve tfplan
      working-directory: ./terraform

    # Install Kubernetes tools
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    # Configure kubeconfig
    - name: Configure kubeconfig
      run: |
        aws eks --region ${{ env.AWS_REGION }} update-kubeconfig \
          --name ${{ env.CLUSTER_NAME }} \
          --alias eks-cluster

    # Helm deployment with existing ACM cert
    - name: Deploy NGINX Helm chart
      run: |
        helm dependency update ./helm/nginx
        helm upgrade --install nginx ./helm/nginx \
          --namespace default \
          --create-namespace \
          --set ingress.annotations.alb\.ingress\.kubernetes\.io/certificate-arn=${{ env.EXISTING_ACM_CERT_ARN }} \
          --set ingress.hosts[0].host=${{ env.DOMAIN_NAME }} \
          --atomic \
          --timeout 10m \
          --wait
      working-directory: ./terraform

    # Verification steps
    - name: Verify deployment
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=nginx --timeout=300s
        kubectl get ingress nginx
        echo "Deployment verification complete"