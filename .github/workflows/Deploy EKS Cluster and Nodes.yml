name: Deploy EKS Cluster & Resources

on:
  workflow_dispatch:
    inputs:
      AWS_REGION:
        description: 'AWS Region'
        required: true
        default: 'ap-southeast-2'
      DESTROY:
        description: 'Set to true to destroy infrastructure'
        required: false
        default: 'false'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    env:
      AWS_REGION: ${{ inputs.AWS_REGION }}
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
      EBS_CSI_IAM_ROLE_ARN: ${{ vars.EBS_CSI_IAM_ROLE_ARN }}
      EKS_CLUSTER_IAM_ROLE_ARN: ${{ vars.EKS_CLUSTER_IAM_ROLE_ARN }}
      EKS_NODEGROUP_IAM_ROLE_ARN: ${{ vars.EKS_NODEGROUP_IAM_ROLE_ARN }}
      LB_CONTROLLER_IAM_ROLE_ARN: ${{ vars.LB_CONTROLLER_IAM_ROLE_ARN }}
      VPC_ID: ${{ vars.VPC_ID }}
      ACM_CERTIFICATE_ARN: ${{ vars.ACM_CERTIFICATE_ARN }}
      SUBNET_IDS: ${{ vars.SUBNET_IDS }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Init
      run: terraform init -upgrade
      working-directory: terraform/eks-cluster

    - name: Terraform Apply Cluster + Node Groups
      run: |
        terraform apply -auto-approve \
          -target=aws_eks_cluster.this \
          -target=aws_eks_node_group.group1 \
          -target=aws_eks_node_group.group2
      working-directory: terraform/eks-cluster
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
        TF_VAR_domain_name: ${{ env.DOMAIN_NAME }}
        TF_VAR_vpc_id: ${{ env.VPC_ID }}
        TF_VAR_acm_certificate_arn: ${{ env.ACM_CERTIFICATE_ARN }}
        TF_VAR_ebs_csi_iam_role_arn: ${{ env.EBS_CSI_IAM_ROLE_ARN }}
        TF_VAR_eks_cluster_role_arn: ${{ env.EKS_CLUSTER_IAM_ROLE_ARN }}
        TF_VAR_nodegroup_role_arn: ${{ env.EKS_NODEGROUP_IAM_ROLE_ARN }}
        TF_VAR_lb_controller_iam_role_arn: ${{ env.LB_CONTROLLER_IAM_ROLE_ARN }}
        TF_VAR_subnet_ids: ${{ env.SUBNET_IDS }}

    - name: Configure kubeconfig
      run: |
        aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.CLUSTER_NAME }}

    - name: Terraform Apply Kubernetes Resources
      run: terraform apply -auto-approve
      working-directory: terraform/eks-cluster
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
        TF_VAR_domain_name: ${{ env.DOMAIN_NAME }}
        TF_VAR_vpc_id: ${{ env.VPC_ID }}
        TF_VAR_acm_certificate_arn: ${{ env.ACM_CERTIFICATE_ARN }}
        TF_VAR_ebs_csi_iam_role_arn: ${{ env.EBS_CSI_IAM_ROLE_ARN }}
        TF_VAR_eks_cluster_role_arn: ${{ env.EKS_CLUSTER_IAM_ROLE_ARN }}
        TF_VAR_nodegroup_role_arn: ${{ env.EKS_NODEGROUP_IAM_ROLE_ARN }}
        TF_VAR_lb_controller_iam_role_arn: ${{ env.LB_CONTROLLER_IAM_ROLE_ARN }}
        TF_VAR_subnet_ids: ${{ env.SUBNET_IDS }}

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.14.4

    - name: Deploy NGINX Helm Chart
      run: |
        helm dependency update ./helm/nginx
        helm upgrade --install nginx ./helm/nginx \
          --namespace default \
          --create-namespace \
          --values ./helm/nginx/values.yaml \
          --set ingress.annotations.alb\.ingress\.kubernetes\.io/certificate-arn=${{ env.ACM_CERTIFICATE_ARN }} \
          --set ingress.hosts[0].host=${{ env.DOMAIN_NAME }} \
          --atomic \
          --timeout 15m

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ failure() || inputs.DESTROY == 'true' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Destroy Infrastructure
      run: terraform destroy -auto-approve
      working-directory: terraform/eks-cluster
      env:
        TF_VAR_aws_region: ${{ inputs.AWS_REGION }}
        TF_VAR_cluster_name: ${{ secrets.CLUSTER_NAME }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_vpc_id: ${{ vars.VPC_ID }}
        TF_VAR_acm_certificate_arn: ${{ vars.ACM_CERTIFICATE_ARN }}
        TF_VAR_ebs_csi_iam_role_arn: ${{ vars.EBS_CSI_IAM_ROLE_ARN }}
        TF_VAR_eks_cluster_role_arn: ${{ vars.EKS_CLUSTER_IAM_ROLE_ARN }}
        TF_VAR_nodegroup_role_arn: ${{ vars.EKS_NODEGROUP_IAM_ROLE_ARN }}
        TF_VAR_lb_controller_iam_role_arn: ${{ vars.LB_CONTROLLER_IAM_ROLE_ARN }}
        TF_VAR_subnet_ids: ${{ vars.SUBNET_IDS }}
