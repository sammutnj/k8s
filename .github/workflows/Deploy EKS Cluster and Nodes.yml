name: Deploy EKS Cluster & Nodes

on:
  workflow_dispatch:
    inputs:
      AWS_REGION:
        description: 'AWS Region'
        required: true
        default: 'ap-southeast-2'
      TF_VERSION:
        description: 'Terraform Version'
        required: true
        default: '1.7.5'
      HELM_VERSION:
        description: 'Helm Version'
        required: true
        default: 'v3.14.4'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    env:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        TF_VERSION: ${{ inputs.TF_VERSION }}
        HELM_VERSION: ${{ inputs.HELM_VERSION }}
        CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        ACM_CERTIFICATE_ARN: ${{ secrets.ACM_CERTIFICATE_ARN }}
        EBS_CSI_IAM_ROLE_ARN: ${{ secrets.EBS_CSI_IAM_ROLE_ARN }}
        EKS_CLUSTER_IAM_ROLE_ARN: ${{ secrets.EKS_CLUSTER_IAM_ROLE_ARN }}
        EKS_NODEGROUP_IAM_ROLE_ARN: ${{ secrets.EKS_NODEGROUP_IAM_ROLE_ARN }}
        LB_CONTROLLER_IAM_ROLE_ARN: ${{ secrets.LB_CONTROLLER_IAM_ROLE_ARN }}
        PRIVATE_SUBNETS: ${{ secrets.PRIVATE_SUBNETS }}
        VPC_ID: ${{ secrets.VPC_ID }}

        TF_VAR_AWS_REGION: ${{ inputs.AWS_REGION }}
        TF_VAR_CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        TF_VAR_DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_TF_VERSION: ${{ inputs.TF_VERSION }}
        TF_VAR_HELM_VERSION: ${{ inputs.HELM_VERSION }}
        TF_VAR_ACM_CERTIFICATE_ARN: ${{ secrets.ACM_CERTIFICATE_ARN }}
        TF_VAR_EBS_CSI_IAM_ROLE_ARN: ${{ secrets.EBS_CSI_IAM_ROLE_ARN }}
        TF_VAR_EKS_CLUSTER_IAM_ROLE_ARN: ${{ secrets.EKS_CLUSTER_IAM_ROLE_ARN }}
        TF_VAR_EKS_NODEGROUP_IAM_ROLE_ARN: ${{ secrets.EKS_NODEGROUP_IAM_ROLE_ARN }}
        TF_VAR_LB_CONTROLLER_IAM_ROLE_ARN: ${{ secrets.LB_CONTROLLER_IAM_ROLE_ARN }}
        TF_VAR_PRIVATE_SUBNETS: ${{ secrets.PRIVATE_SUBNETS }}
        TF_VAR_VPC_ID: ${{ secrets.VPC_ID }}
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.13.0

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        run: terraform init -upgrade
        working-directory: terraform/eks-cluster

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/eks-cluster

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="cluster_name=${{ secrets.CLUSTER_NAME }}" \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -out=tfplan
        working-directory: terraform/eks-cluster

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/eks-cluster

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubeconfig
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig \
            --name ${{ env.CLUSTER_NAME }} \
            --alias ${{ env.CLUSTER_NAME }}

      - name: Deploy Helm Chart
        run: |
          helm dependency update ./helm/nginx
          helm upgrade --install nginx ./helm/nginx \
            --namespace default \
            --create-namespace \
            --set ingress.annotations.alb\.ingress\.kubernetes\.io/certificate-arn=$(terraform output -raw acm_certificate_arn) \
            --set ingress.hosts[0].host=${{ env.DOMAIN_NAME }} \
            --atomic \
            --timeout 10m
        working-directory: terraform/eks-cluster